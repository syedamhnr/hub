package com;

import java.io.FileOutputStream;

import com.lowagie.text.Chapter;
import com.lowagie.text.Document;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Rectangle;
import com.lowagie.text.pdf.BaseFont;
import com.lowagie.text.pdf.PdfContentByte;
import com.lowagie.text.pdf.PdfCopyFields;
import com.lowagie.text.pdf.PdfImportedPage;
import com.lowagie.text.pdf.PdfReader;
import com.lowagie.text.pdf.PdfWriter;


public class FirstPdf {
	public static void main(String[] args)throws Exception {
/*	System.out.println("Concatenate Two PDF"); 
	PdfReader reader1 = new PdfReader("chapterPDF.pdf");
	PdfReader reader2 = new PdfReader("sectionPDF.pdf");
	PdfCopyFields copy = 
	new PdfCopyFields(new FileOutputStream("concatenatedPDF.pdf"));
	copy.addDocument(reader1);
	copy.addDocument(reader2);
	copy.close();*/
	}
	
}
	/* public static void main(String[] args)throws Exception {
		  System.out.println("Combines two page");  
		    PdfReader reader = new PdfReader("chapterPDF.pdf");  
		  int n = reader.getNumberOfPages(); 
		  Rectangle psize = reader.getPageSize(1);
		  float width = psize.height();
		  float height = psize.width();  
		 Document document = new Document(new Rectangle(width, height)); 
		  PdfWriter Pdfwriter = PdfWriter.getInstance(document, 
		new FileOutputStream("combine2Page1.pdf"));
		 document.open();
		  
		 PdfContentByte cb = Pdfwriter.getDirectContent();
		 int i = 0;
		 int p = 0;
		 while (i < n) {
		 document.newPage();
		 p++;
		 i++;
		 PdfImportedPage page1 = Pdfwriter.getImportedPage(reader, i);
		 cb.addTemplate(page1, .5f, 0, 0, .5f, 60, 120);
		 if (i < n) {
		 i++;
		 PdfImportedPage page2 = Pdfwriter.getImportedPage(reader, i);
		 cb.addTemplate(page2, .5f, 0, 0, .5f, width / 2 + 60, 120);
		 }
		 BaseFont bf = BaseFont.createFont(BaseFont.HELVETICA, 
		BaseFont.CP1252,BaseFont.NOT_EMBEDDED);
		 cb.beginText();
		 cb.setFontAndSize(bf, 19);
		 cb.showTextAligned(PdfContentByte.ALIGN_CENTER, "page " + p 
		+ " of " + ((n / 2) + (n % 2 > 0? 1 : 0)), width / 2, 40, 0);
		 cb.endText();
		 }
		 document.close();  
		  }
		
}*/
	/*public static void main(String arg[])throws Exception{
		Document document=new Document();
		PdfWriter.getInstance(document,new FileOutputStream("chapterPDF.pdf"));
		document.open();
		Paragraph paragraph=new Paragraph("Rose-Java");
		Paragraph paragraph1=new Paragraph("Rose-Java1");
		Paragraph paragraph2=new Paragraph("Rose-Java2");
		Paragraph paragraph3=new Paragraph("Rose-Java3");
		Paragraph paragraph4=new Paragraph("Rose-Java4");
		Paragraph paragraph5=new Paragraph("Rose-Java5");
		Chapter chapter=new Chapter(paragraph,0);
		Chapter chapter1=new Chapter(paragraph1,1);
		Chapter chapter2=new Chapter(paragraph2,2);
		Chapter chapter3=new Chapter(paragraph3,3);
		Chapter chapter4=new Chapter(paragraph4,4);
		Chapter chapter5=new Chapter(paragraph5,5);
		document.add(chapter);
		document.add(chapter1);
		document.add(chapter2);
		document.add(chapter3);
		document.add(chapter4);             
		document.add(chapter5);
		document.close();
		PdfReader reader = new PdfReader("chapterPDF.pdf");  
		  int n = reader.getNumberOfPages(); 
		  System.out.println(n);
		}
		//output
		1. Chapter1
		1.1. Section1
		Rose India
		1.2. section2
		roseinia.net

	}*/
	/*private static String FILE = "/home/syeda/FirstPdf.pdf";
	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
			Font.BOLD);
	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.NORMAL, BaseColor.RED);
	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
			Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.BOLD);

	public static void main(String[] args) {
		try {
			Document document = new Document();
			PdfWriter.getInstance(document, new FileOutputStream(FILE));
			document.open();
			addMetaData(document);
			addTitlePage(document);
			addContent(document);
			document.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// iText allows to add metadata to the PDF which can be viewed in your Adobe
	// Reader
	// under File -> Properties
	private static void addMetaData(Document document) {
		document.addTitle("My first PDF");
		document.addSubject("Using iText");
		document.addKeywords("Java, PDF, iText");
		document.addAuthor("Lars Vogel");
		document.addCreator("Lars Vogel");
	}

	private static void addTitlePage(Document document)
			throws DocumentException {
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph("Title of the document", catFont));

		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph(
				"Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				smallBold));
		addEmptyLine(preface, 3);
		preface.add(new Paragraph(
				"This document describes something which is very important ",
				smallBold));

		addEmptyLine(preface, 8);

		preface.add(new Paragraph(
				"This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-).",
				redFont));

		document.add(preface);
		// Start a new page
		document.newPage();
	}

	private static void addContent(Document document) throws DocumentException {
		Anchor anchor = new Anchor("First Chapter", catFont);
		anchor.setName("First Chapter");

		// Second parameter is the number of the chapter
		Chapter catPart = new Chapter(new Paragraph(anchor), 1);

		Paragraph subPara = new Paragraph("Subcategory 1", subFont);
		Section subCatPart = catPart.addSection(subPara);
		subCatPart.add(new Paragraph("Hello"));

		subPara = new Paragraph("Subcategory 2", subFont);
		subCatPart = catPart.addSection(subPara);
		subCatPart.add(new Paragraph("Paragraph 1"));
		subCatPart.add(new Paragraph("Paragraph 2"));
		subCatPart.add(new Paragraph("Paragraph 3"));

		// Add a list
		createList(subCatPart);
		Paragraph paragraph = new Paragraph();
		addEmptyLine(paragraph, 5);
		subCatPart.add(paragraph);

		// Add a table
		createTable(subCatPart);

		// Now add all this to the document
		document.add(catPart);

		// Next section
		anchor = new Anchor("Second Chapter", catFont);
		anchor.setName("Second Chapter");

		// Second parameter is the number of the chapter
		catPart = new Chapter(new Paragraph(anchor), 1);

		subPara = new Paragraph("Subcategory", subFont);
		subCatPart = catPart.addSection(subPara);
		subCatPart.add(new Paragraph("This is a very important message"));

		// Now add all this to the document
		document.add(catPart);

	}

	private static void createTable(Section subCatPart)
			throws BadElementException {
		PdfPTable table = new PdfPTable(3);

		// t.setBorderColor(BaseColor.GRAY);
		// t.setPadding(4);
		// t.setSpacing(4);
		// t.setBorderWidth(1);

		PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Table Header 2"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Table Header 3"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		table.setHeaderRows(1);

		table.addCell("1.0");
		table.addCell("1.1");
		table.addCell("1.2");
		table.addCell("2.1");
		table.addCell("2.2");
		table.addCell("2.3");

		subCatPart.add(table);

	}

	private static void createList(Section subCatPart) {
		List list = new List(true, false, 10);
		list.add(new ListItem("First point"));
		list.add(new ListItem("Second point"));
		list.add(new ListItem("Third point"));
		subCatPart.add(list);
	}

	private static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}*/
//}